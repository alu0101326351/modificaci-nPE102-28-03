{"/home/usuario/modificaci-nPE102-28-03/src/Solve.ts":{"path":"/home/usuario/modificaci-nPE102-28-03/src/Solve.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":24}},"2":{"start":{"line":14,"column":8},"end":{"line":14,"column":25}},"3":{"start":{"line":15,"column":8},"end":{"line":15,"column":33}},"4":{"start":{"line":22,"column":8},"end":{"line":22,"column":48}},"5":{"start":{"line":25,"column":0},"end":{"line":25,"column":24}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":32},"end":{"line":16,"column":5}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":12},"end":{"line":23,"column":5}},"line":21}},"branchMap":{},"s":{"0":1,"1":1,"2":2,"3":2,"4":2,"5":1},"f":{"0":2,"1":2},"b":{},"inputSourceMap":{"version":3,"file":"/home/usuario/modificaci-nPE102-28-03/src/Solve.ts","sources":["/home/usuario/modificaci-nPE102-28-03/src/Solve.ts"],"names":[],"mappings":";;;AAQI;;GAEG;AACH,MAAa,MAAM;IACf;;;;OAIG;IACH,YAAoB,IAAc,EAAU,QAAkB;QAA1C,SAAI,GAAJ,IAAI,CAAU;QAAU,aAAQ,GAAR,QAAQ,CAAU;IAAG,CAAC;IAElE;;;OAGG;IACH,KAAK;QACD,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5C,CAAC;CACJ;AAfD,wBAeC","sourcesContent":["    \n    /**\n     * Interfaz que declara el método execute donde se implementará el algoritmo de ordenación\n     */\n    export interface Strategy {\n        execute(data: number[]): number[];\n    }\n    \n    /**\n     * Clase que donde se declara el array que se quiere ordenar y el algoritmo\n     */\n    export class Solver {\n        /**\n         * Recibe el array y la estrategia de resolución\n         * @param data \n         * @param strategy \n         */\n        constructor(private data: number[], private strategy: Strategy) {}\n    \n        /**\n         * Devuelve el array ordenado mediante la ordenación indicada\n         * @returns \n         */\n        logic(): number[] {\n            return this.strategy.execute(this.data);\n        }\n    }\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"cd473e6e1623b1c705ae4e8595b85ea559f21557","contentHash":"b6c88f2f9571973281a8ecd817acbbcf8ab28149adc90f80a1c2ef8418da3124"},"/home/usuario/modificaci-nPE102-28-03/src/BubbleSort.ts":{"path":"/home/usuario/modificaci-nPE102-28-03/src/BubbleSort.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":28}},"2":{"start":{"line":14,"column":8},"end":{"line":22,"column":9}},"3":{"start":{"line":14,"column":21},"end":{"line":14,"column":22}},"4":{"start":{"line":15,"column":12},"end":{"line":21,"column":13}},"5":{"start":{"line":15,"column":25},"end":{"line":15,"column":26}},"6":{"start":{"line":16,"column":16},"end":{"line":20,"column":17}},"7":{"start":{"line":17,"column":31},"end":{"line":17,"column":38}},"8":{"start":{"line":18,"column":20},"end":{"line":18,"column":42}},"9":{"start":{"line":19,"column":20},"end":{"line":19,"column":39}},"10":{"start":{"line":23,"column":8},"end":{"line":23,"column":20}},"11":{"start":{"line":26,"column":0},"end":{"line":26,"column":32}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":18},"end":{"line":24,"column":5}},"line":13}},"branchMap":{"0":{"loc":{"start":{"line":16,"column":16},"end":{"line":20,"column":17}},"type":"if","locations":[{"start":{"line":16,"column":16},"end":{"line":20,"column":17}},{"start":{"line":16,"column":16},"end":{"line":20,"column":17}}],"line":16}},"s":{"0":1,"1":1,"2":1,"3":1,"4":4,"5":4,"6":12,"7":3,"8":3,"9":3,"10":1,"11":1},"f":{"0":1},"b":{"0":[3,9]},"inputSourceMap":{"version":3,"file":"/home/usuario/modificaci-nPE102-28-03/src/BubbleSort.ts","sources":["/home/usuario/modificaci-nPE102-28-03/src/BubbleSort.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACC,MAAa,UAAU;IACvB;;;;OAIG;IACH,OAAO,CAAC,IAAc;QAClB,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACjC,KAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAErC,IAAG,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;oBACtB,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;oBACnB,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;oBACtB,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;iBACtB;aAEJ;SACJ;QACD,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AApBG,gCAoBH","sourcesContent":["import { Strategy }  from './Solve'\n\n/**\n * Clase que implementa el algoritmo BubbleSort\n */\n    export class BubbleSort implements Strategy {\n    /**\n     * Ordena un array númerico con el algoritmo BubbleSort\n     * @param data \n     * @returns \n     */\n    execute(data: number[]): number[] {\n        for(let i = 0; i < data.length; i++) {\n            for(let j = 0; j < data.length - 1; j++) {\n    \n                if(data[j] > data[j + 1]) {\n                    let swap = data[j];\n                    data[j] = data[j + 1];\n                    data[j + 1] = swap;\n                }\n\n            }\n        }\n        return data;        \n    }\n}\n\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7209cafa0218b7611b46790d009ed19c02fca202","contentHash":"47698a984f55a2ba43994245c48fef5252201ba348c76b33140ecbff226bf481"},"/home/usuario/modificaci-nPE102-28-03/src/mergeSort.ts":{"path":"/home/usuario/modificaci-nPE102-28-03/src/mergeSort.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":0},"end":{"line":3,"column":27}},"2":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"3":{"start":{"line":15,"column":12},"end":{"line":15,"column":24}},"4":{"start":{"line":17,"column":23},"end":{"line":17,"column":50}},"5":{"start":{"line":18,"column":21},"end":{"line":18,"column":42}},"6":{"start":{"line":19,"column":22},"end":{"line":19,"column":40}},"7":{"start":{"line":20,"column":8},"end":{"line":20,"column":67}},"8":{"start":{"line":23,"column":26},"end":{"line":23,"column":28}},"9":{"start":{"line":23,"column":42},"end":{"line":23,"column":43}},"10":{"start":{"line":23,"column":58},"end":{"line":23,"column":59}},"11":{"start":{"line":24,"column":8},"end":{"line":33,"column":9}},"12":{"start":{"line":25,"column":12},"end":{"line":32,"column":13}},"13":{"start":{"line":26,"column":16},"end":{"line":26,"column":50}},"14":{"start":{"line":27,"column":16},"end":{"line":27,"column":28}},"15":{"start":{"line":30,"column":16},"end":{"line":30,"column":52}},"16":{"start":{"line":31,"column":16},"end":{"line":31,"column":29}},"17":{"start":{"line":34,"column":8},"end":{"line":36,"column":45}},"18":{"start":{"line":39,"column":0},"end":{"line":39,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":18},"end":{"line":21,"column":5}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":23},"end":{"line":37,"column":5}},"line":22}},"branchMap":{"0":{"loc":{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},"type":"if","locations":[{"start":{"line":14,"column":8},"end":{"line":16,"column":9}},{"start":{"line":14,"column":8},"end":{"line":16,"column":9}}],"line":14},"1":{"loc":{"start":{"line":24,"column":15},"end":{"line":24,"column":67}},"type":"binary-expr","locations":[{"start":{"line":24,"column":15},"end":{"line":24,"column":38}},{"start":{"line":24,"column":42},"end":{"line":24,"column":67}}],"line":24},"2":{"loc":{"start":{"line":25,"column":12},"end":{"line":32,"column":13}},"type":"if","locations":[{"start":{"line":25,"column":12},"end":{"line":32,"column":13}},{"start":{"line":25,"column":12},"end":{"line":32,"column":13}}],"line":25}},"s":{"0":1,"1":1,"2":7,"3":4,"4":3,"5":3,"6":3,"7":3,"8":3,"9":3,"10":3,"11":3,"12":5,"13":3,"14":3,"15":2,"16":2,"17":3,"18":1},"f":{"0":7,"1":3},"b":{"0":[4,3],"1":[8,6],"2":[3,2]},"inputSourceMap":{"version":3,"file":"/home/usuario/modificaci-nPE102-28-03/src/mergeSort.ts","sources":["/home/usuario/modificaci-nPE102-28-03/src/mergeSort.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACC,MAAa,SAAS;IAClB;;;;OAIG;IACH,OAAO,CAAC,IAAc;QAClB,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;YAClB,OAAO,IAAI,CAAC;SACf;QACD,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAE3C,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;QACnC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAEjC,OAAO,IAAI,CAAC,KAAK,CACb,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAC1C,CAAC;IACN,CAAC;IAED,KAAK,CAAE,IAAI,EAAE,KAAK;QACd,IAAI,WAAW,GAAG,EAAE,EAAE,SAAS,GAAG,CAAC,EAAE,UAAU,GAAG,CAAC,CAAC;QAEpD,OAAO,SAAS,GAAG,IAAI,CAAC,MAAM,IAAI,UAAU,GAAG,KAAK,CAAC,MAAM,EAAE;YAC3D,IAAI,IAAI,CAAC,SAAS,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,EAAE;gBACvC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBAClC,SAAS,EAAE,CAAC;aACb;iBAAM;gBACL,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;gBACpC,UAAU,EAAE,CAAC;aACd;SACF;QAED,OAAO,WAAW;aACT,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;aAC7B,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3C,CAAC;CACN;AArCD,8BAqCC","sourcesContent":["import { Strategy } from \"./Solve\";\n\n/**\n * Clase que implementa el algoritmo MergeSort\n */\n    export class MergeSort implements Strategy {\n        /**\n         * Ordena el array usando el algoritmo mergeSort\n         * @param data \n         * @returns \n         */\n        execute(data: number[]) {\n            if (data.length <= 1) {\n                return data;\n            }\n            const middle = Math.floor(data.length / 2);\n            \n            const left = data.slice(0, middle);\n            const right = data.slice(middle);\n            \n            return this.merge(\n                this.execute(left), this.execute(right)\n            );\n        }\n\n        merge (left, right) {\n            let resultArray = [], leftIndex = 0, rightIndex = 0;\n          \n            while (leftIndex < left.length && rightIndex < right.length) {\n              if (left[leftIndex] < right[rightIndex]) {\n                resultArray.push(left[leftIndex]);\n                leftIndex++; \n              } else {\n                resultArray.push(right[rightIndex]);\n                rightIndex++; \n              }\n            }\n\n            return resultArray\n                    .concat(left.slice(leftIndex))\n                    .concat(right.slice(rightIndex));\n          }\n    }\n\n\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"01fb3cf78b09afbf3d282bf5b1a1d361072a94a0","contentHash":"8c0e1ab777c7ff498c2d735ea33b7cd21f71864397761ff92a510001026abd08"}}